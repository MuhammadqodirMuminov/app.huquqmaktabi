name: Release
permissions:
  packages: write
  contents: write
on:
  push:
    branches: [main, dev]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  PROD_BRANCH: main
  TEST_BRANCH: dev

jobs:
  push_to_registry:
    runs-on: ubuntu-22.04
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          build-args: |
            "APP_I18N=${{ env.BRANCH_NAME == env.TEST_BRANCH }}"
            "APP_BRANCH=${{ env.BRANCH_NAME }}"
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_via_ssh:
    needs: push_to_registry
    runs-on: ubuntu-22.04
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "Generating .env file"

          echo "# Autogenerated .env file" > .env

          echo "TAG=${{ needs.push_to_registry.outputs.tags }}" >> .env

      - name: Assign prod or test env.HOST and env.KEY env vars depending on branch
        run: |
          if [ "${{ env.BRANCH_NAME }}" == "${{ env.PROD_BRANCH }}" ]; then
            echo "HOST=${{ secrets.SERVER_PROD_HOST }}" >> $GITHUB_ENV
            echo "KEY<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.SERVER_PROD_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi;
          if [ "${{ env.BRANCH_NAME }}" == "${{ env.TEST_BRANCH }}" ]; then
            echo "HOST=${{ secrets.SERVER_HOST }}" >> $GITHUB_ENV
            echo "KEY<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.SERVER_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi;

      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          port: 22
          key: ${{ env.KEY }}
          source: './docker-compose.yml,./.env'
          target: '~/.deploy/${{ github.event.repository.name }}/'

      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v1.0.3
        env:
          APPTOKEN: ${{ secrets.GITHUB_TOKEN }}
          USERNAME: ${{ secrets.SERVER_USERNAME }}
        with:
          host: ${{ env.HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ env.KEY }}
          port: 22
          envs: APPTOKEN,USERNAME
          script: |
            echo ${{ secrets.GITHUB_TOKEN }}
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose pull
            docker compose up -d

      - name: Get commit messages
        if: always()
        id: get_commits
        run: |
          echo "Fetching commit messages..."
          commits=$(git log -n 5 --pretty=format:"* %h - %s (%an)" --no-merges | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "Commits:"
          echo "$commits"
          echo "::set-output name=commits::$commits"

      - name: Debug Commit Messages
        if: always()
        run: |
          echo "Commits output:"
          echo "${{ steps.get_commits.outputs.commits }}"

      - name: Send Telegram Notification
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            *Deployment to* \`${{ env.BRANCH_NAME }}\` *branch finished with status:* \`${{ job.status }}\`\n\n
            *Commits:* \n${{ steps.get_commits.outputs.commits }}
